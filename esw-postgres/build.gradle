buildscript {
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.14.11'
        classpath "org.postgresql:postgresql:${psqlVersion}"

    }
}
plugins {
    id "org.flywaydb.flyway" version "7.11.0"
    id 'nu.studer.jooq' version '5.2.1'
}

configurations {
    flywayMigration
}

dependencies {
    implementation project(":esw-core")
    jooqGenerator("org.postgresql:postgresql:${psqlVersion}")
    api("org.postgresql:postgresql:${psqlVersion}")
    api('org.jooq:jooq-kotlin:3.14.11')
    api('com.fasterxml.jackson.core:jackson-databind:2.12.3')
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-sources/main/java']
        }
    }
}

flyway {
    // these properties should be passed in via -P flags, e.g.
    // ./gradlew flywayMigrate -PdbUser=postgres -PdbPass=mysecretpassword -PdbUrl=localhost:5432
    url = "jdbc:postgresql://${project.hasProperty("dbUrl") ? project.property("dbUrl") : "localhost:5432"}/warehouse"
    user = project.hasProperty("dbUser") ? project.property("dbUser") : "postgres"
    password = project.hasProperty("dbPass") ? project.property("dbPass") : "mysecretpassword"
    configurations = ['flywayMigration']
}

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                        excludes = ''
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'demo.pember.eswarehouse.postgres'
                        directory = 'build/generated-sources/main/java'
                    }
                }
            }
        }
    }
}

// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}


